这个文件是为了测试 `git rm --cached`

我在第3行加了这句话，测试 `git log -p`

添加
git add .

提交
git commit -m ""
git commit -a -m ""
！！！git commit --amend -m 为了防止一次commit后有漏下的文件，带上-m可以在后面直接定义新的commit message。不带的话，git也会让你在文本编辑器里重新确认一下。

查看不同
git diff 只能查看未暂存的文件区别
git diff --staged 只能查看暂存的文件区别（通常可以使用额外的diff-tool替代，譬如vscode自带的功能）或者 git diff --cached

删除暂存区文件（注意不是本地仓库的）--- 不推荐过度使用 可能会导致本身被追踪的文件无缘无故删除。不利于文件历史记录的保存。
git rm 
git rm -f 强制删除
git rm --cached 删除，但保留该文件

日志
git log
git log -p 显示每次提交中文件的具体更改
git log --stat 显示每次提交中统计信息
git log --graph 显示每次提交中的分支合并等

撤销
工作区撤销
- git checkout -- <file>
- git restore <file>
暂存区撤销
- git reset HEAD <file> 重置HEAD指针
- git restore --staged <file>
本地仓库撤销(git reset <commit id>)
--soft 回退的版本会放在暂存区
--mixed 回退的版本会放在工作区
--hard 回退的版本被丢弃

生成密匙和公钥
ssh-keygen -t rsa

在 ~/.ssh 文件夹下会生成密匙 id-rsa 以及 id-rsa.pub

复制 id-rsa.pub 文件内容后，粘贴到github的settings的ssh keys中


推送
git push <远程仓库名> <本地分支名>:<远程分支名>

拉取
git pull <远程仓库名> <远程分支名>:<本地分支名>

git fetch <远程仓库名> 默认会拉取远程所有分支
git fetch <远程仓库名> <远程仓库分支名> 拉取远程某一分支
远程仓库名是可以自定义的，默认是origin。譬如拉取远程的dev分支，git fetch origin dev。执行之后，本地会有origin/dev的新分支（可用git branch -r来查看）。
TODO:
后面就可以使用git merge或者git rebase来合并分支。

远程仓库
git remote 默认远程仓库是origin
git remote -v 列出详细的远程仓库列表

git remote add <name> <url> 添加远程仓库地址
git remote set-url <name> <url> 重新设置某一远程仓库地址
git remote rm/remove <name> 删除某一远程仓库
git remote rename <old name> <new name> 远程仓库重命名


临时性保存
git stash
git stash pop/apply
git stash list
git stash pop/apply stash@{2}
git stash drop stash@{0}

创建分支branch
git branch 查看本地分支
-l 查看本地分支
-r 查看远程分支
-a 查看所有分支
git branch -d <branch名> 删除一个本地分支
git push origin -d/--delete <branch名> 删除一个远程分支(或者git push origin :<branch名>)
git checkout <branch名> 切换到某一分支
git checkout -b <branch名> 创建并切换到某一分支
git branch --set-upstream <本地分支名> origin/<远程分支名> 将本地分支与远程分支建立关联。建立后，可直接使用git push/pull。省略掉分支名。
TODO:git branch | grep -v "master" | xargs git branch -D 删除本地除master以外的所有分支 

创建标记tag
git tag <tag名> 创建一个tag
git tag <tag名> -m "message" 创建带有message的tag
git tag 查看已存在的tag列表（或者使用git tag -l）
git tag -d <tag名> 删除一个本地tag
git push <远程仓库名> <tag名> 将本地的tag推送到远程仓库
git push <远程仓库名> :<tag名> 删除远程的一个tag (或者git push <远程仓库名> --delete <tag名>)
git ls-remote --tags origin 查看远程的所有tag

拉取远程分支与tag
git fetch origin --prune 不会覆盖本地

fetch与pull的区别
git pull origin master
```shell
git fetch origin master
git log master..origin/master
git merge origin/master
```
```shell
#拉取远程master分支到本地temp分支，会自动创建temp分支
git fetch origin master:temp
git diff temp
git merge temp
```
git fetch origin master
git checkout -b newBrach origin/master 根据远程master分支 新建一条分支


TODO:
git merge --no-commit <branch>
git pull --rebase <name> <branch>

git merge 与 git rebase   git cherry-pick


git config --global user.name "maxsu"
$ git config --global user.email "yiibai.com@gmail.com"
